#!/usr/bin/ruby

#
# statusnet - eventasaurus consumer plugin to send event notifications to statusnet
#
# TODO: abstract statusnet host
#

$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), "..", "lib"))
require 'rubygems'
require 'eventasaurus'
require 'net/http'
require 'trollop'
require 'daemons'

opts = Trollop::options do
  banner <<-EOS
daemon to send eventasaurus notifications to statusnet

Usage:
       statusnet [options]
where [options] are:
EOS

  opt :ident, "Event ident to listen for", :type => String
  opt :option, "Statusnet password for ident", :type => String
end

Trollop::die :ident, "need an ident" if !opts[:ident]
Trollop::die :option, "need a password" if !opts[:option]


def post(user, pass, status)
  api_update = "http://#{user}:#{pass}@statusnet/api/statuses/update.json"
  res = Net::HTTP.post_form(URI(api_update), 'status' => status)
  res.body
end

stomp = Eventasaurus::Consumer.new

options = { 
  :dir_mode => :system,
  :log_dir => "/var/log/",
  :log_output => true
}

process = "statusnet_#{opts[:ident]}"
Daemons.run_proc(process, options) do   
  loop do
    begin
      msg = stomp.get
      next if (msg['ident'] != opts[:ident])
      out ="#{msg['message']}"
      if msg['tags']
        msg['tags'].each do |tag|
          out += "\n#" + tag
        end
      end
      post(opts[:ident],opts[:option],out)
    end
  end
end
