#!/usr/bin/ruby

#
# mailer - eventasaurus consumer plugin to send event notifications via email
#
# TODO: abstract smtp host
#

$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), "..", "lib"))
require 'rubygems'
require 'eventasaurus'
require 'net/smtp'
require 'trollop'
require 'daemons'

opts = Trollop::options do
  banner <<-EOS
daemon to send eventasaurus notifications to email

Usage:
       mailer [options]
where [options] are:
EOS

  opt :ident, "Event ident to listen for", :type => String
  opt :option, "Email address to send events to", :type => String
end

Trollop::die :ident, "need an ident" if !opts[:ident]
Trollop::die :option, "need an email" if !opts[:option]


def send_email(from, to, subject, message)
  msg = <<END_OF_MESSAGE
From: <#{from}>
To: <#{to}>
Subject: #{subject}

#{message}
END_OF_MESSAGE

  Net::SMTP.start('smtp') do |smtp|
    smtp.send_message msg, from, to
  end
end

process = "mailer_#{opts[:ident]}"
stomp = Eventasaurus::Consumer.new(process)

options = { 
  :dir_mode => :system,
  :log_dir => "/var/log/",
  :log_output => true
}

Daemons.run_proc(process, options) do 
  loop do
    begin
      msg = stomp.get
      next if (msg['ident'] != opts[:ident])
      out ="#{msg['message']}"
      if msg['tags'] 
        msg['tags'].each do |tag|
          out += "\n#" + tag
        end
      end
      ident = msg['ident']
      send_email(ident, opts[:option], "Event from #{opts[:ident]}", out)
    end
  end
end
